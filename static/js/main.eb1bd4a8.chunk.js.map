{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","sec","setSec","status","setStatus","useEffect","unsubscribe","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","timeout","startTimer","React","useCallback","stopTimer","resetTimer","waitTimer","wasClicked","className","Date","toISOString","slice","type","onClick","clearTimeout","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKaA,EAAM,WACjB,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAc,IAAIC,IAUxB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,QAAXR,GACFD,GAAO,SAAAU,GAAG,OAAIA,EAAM,UAInB,WACLN,EAAYO,OACZP,EAAYQ,cAEb,CAACX,IAEJ,IAmBIY,EAnBEC,EAAaC,IAAMC,aAAY,WACnCd,EAAU,SACT,IAEGe,EAAYF,IAAMC,aAAY,WAClCd,EAAU,QACVF,EAAO,KACN,IAEGkB,EAAaH,IAAMC,aAAY,WACnChB,EAAO,GACPE,EAAU,SACT,IAEGiB,EAAYJ,IAAMC,aAAY,WAClCd,EAAU,UACT,IAECkB,GAAa,EAiBjB,OACE,sBAAKC,UAAU,QAAf,UACE,+BACG,IAAIC,KAAKvB,GAAKwB,cAAcC,MAAM,GAAI,MAEzC,wBACEH,UAAU,gBACVI,KAAK,SACLC,QAASZ,EAHX,mBAOA,wBAAQO,UAAU,gBAAgBI,KAAK,SAASC,QAAST,EAAzD,kBAGA,wBACEI,UAAU,gBACVI,KAAK,SACLC,QAASR,EAHX,mBAOA,wBACEG,UAAU,gBACVI,KAAK,SACLC,QAvCc,WAClB,GAAIN,EAIF,OAHAA,GAAa,EACbO,aAAad,GAENM,IAGTC,GAAa,EACbP,EAAUe,YAAW,WACnBR,GAAa,IACZ,MAyBD,sBCvESS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eb1bd4a8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport const App = () => {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState('stop');\n\n  useEffect(() => {\n    const unsubscribe = new Subject();\n\n    interval(1000)\n      .pipe(takeUntil(unsubscribe))\n      .subscribe(() => {\n        if (status === 'run') {\n          setSec(val => val + 1000);\n        }\n      });\n\n    return () => {\n      unsubscribe.next();\n      unsubscribe.complete();\n    };\n  }, [status]);\n\n  const startTimer = React.useCallback(() => {\n    setStatus('run');\n  }, []);\n\n  const stopTimer = React.useCallback(() => {\n    setStatus('stop');\n    setSec(0);\n  }, []);\n\n  const resetTimer = React.useCallback(() => {\n    setSec(0);\n    setStatus('run');\n  }, []);\n\n  const waitTimer = React.useCallback(() => {\n    setStatus('wait');\n  }, []);\n\n  let wasClicked = false;\n  let timeout;\n\n  const waitDbClick = () => {\n    if (wasClicked) {\n      wasClicked = false;\n      clearTimeout(timeout);\n\n      return waitTimer();\n    }\n\n    wasClicked = true;\n    timeout = setTimeout(() => {\n      wasClicked = false;\n    }, 300);\n  };\n\n  return (\n    <div className=\"timer\">\n      <span>\n        {new Date(sec).toISOString().slice(11, 19)}\n      </span>\n      <button\n        className=\"timer__button\"\n        type=\"button\"\n        onClick={startTimer}\n      >\n        Start\n      </button>\n      <button className=\"timer__button\" type=\"button\" onClick={stopTimer}>\n        Stop\n      </button>\n      <button\n        className=\"timer__button\"\n        type=\"button\"\n        onClick={resetTimer}\n      >\n        Reset\n      </button>\n      <button\n        className=\"timer__button\"\n        type=\"button\"\n        onClick={waitDbClick}\n      >\n        Wait\n      </button>\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}